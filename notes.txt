DS -> 

23,34,454,56,56,6,76,767 

sort -> code -> algo -> asc order -> 

logic -> 



*1) time complexity --> execution time taken by the program 
2) space complexity  --> space taken by the program 



addition -> 2  3 -> 5 -> 2 second 


50k -> 40second -> 


ALGO -> DS 


gun rifel machine gun , bazooka 

ahmedabad -> rifel , gun
gandhinagar -> machine gun 



------> client -> 
------------------------------------------------------------------------------------------------------------

                            DS
        Linear                              NonLinear 
   Array                                        Tree  
   Stack                                        Graph 
   Queue 
   LinkedList 


searching 

sorted 

------------------------------------------------------------------------------------------------------------
 sort -> 30 number 

 input 30 -> 30 second  
          -> 5  second  
          -> 20 second 
          -> 10 second 
          -> 12 second
          -> 15 second 
          -> 18 second
          -> 22 second  

 W : 30  : Big O  O 
 B : 5   : Omega 
 A : X   : Theta 

------------------------------------------------------------------------------------------------------------



SIZE = 5

for(i=0;i<SIZE;i++){
    if(a[i] == search ){//0 1 2 3 4 
        //found 
        //break; 
    }
}

10 20 30 40 50 
10 
5 times -> O(n)   




size=20 
for(i=1;i<=size;i++){
    if(i%2==0){
        i++;
    }
}

1           1,2,4,6,8,10,12,14
2           1,2,4,6,8,10,12,14,16,18,20     
4
6
8
10

6 times 

10->6  ::  O(n/2)+1   O(n/2)  ->  
15->8
20->11 
------------------------------------------------------------------------------------------

int a  = 10; 



a = 20 ; 


int a[] // more than 1 value 

int a[5];  //a[0] a[1] a[2] a[3] a[4]


//200 
//204 
//208 

//index -> starts 0 , ends size -1 


-------------------------------------------------------------------

int a[SIZE] ;


void insert(int location,int data){

}

void display(){

}


1 insert 
2 display
3 exit 


insert(1,10); 

insert(1,20); 

insert(1,30); 

insert(4,100);

insert(2,200);


insert(1,1000); 

------------------------------------------------------------

search algo :- 
        1) linear search 
        2) binary search 


10 52 65 87 96 54 21 

key=65 
found 

key=650
not found 


------------------------------------------------------------


a = [ 10,20,30,40,50]
shift(1) [ 20,30,40,50,10]


a = [ 10,20,30,40,50]
shift(2) [ 30,40,50,10,20]

-------------------------------------------------------------

10  5   21  17  6   -1  11  85  8   



-> 5    10   21  17  6   -1  11  85  8   
-> 5    10   21  17  6   -1  11  85  8   
-> 5    10   17  21  6   -1  11  85  8   
-> 5    10   17  6   21  -1  11  85  8   
-> 5    10   17  6   -1  21  11  85  8   
-> 5    10   17  6   -1  11  21  85  8
-> 5    10   17  6   -1  11  21  85  8
-> 5    10   17  6   -1  11  21  8   85




-> 5    10   6  -1  11  17  8  21  85


-> 5    6   -1  10  11  8   17  21  85

----------------------------------------------------------------------------------

selection sort :- 

min 
10  5   21  17  6   -1  11  85  8  
i   j

-> -1  5   21  17  6   10  11  85  8  
                                     j  
                        min  
-> -1  5   21  17  6   10  11  85  8  
       min                           j
              i
-> -1  5   6  8   21   10  11  85  17  
                                       j 
                                    min 

--------------------------------------------------------------------------------
insertion sort -> 


    10  5   21  17  6   -1  11  85  8
    
        tmp=5 
     5  10   21  17  6   -1  11  85  8
        i    
-------------------------------------------------------------------------------


bubble sort -> first --> last --> left : right and swap 

selection sort -> left : right : smallest : select 

insertion sort -> right : left 

merge sort :->

    0   1   2   3   4   
a : 5   10  15  20  25 
                        i

    0   1   2   3   4
b : 1   7   18  30  35 
                        j

a+b => c {size}

    0   1   2   3   4   5   6   7   8   9   
c : 1   5   7   10  15  18  20  25  30  35
                                        k 

----------------------------------------------------------------------



20   35   15   10  7  18  1  25  30  5


            20   35   15   10  7                            18  1  25  30  5
    20  35  15                10  7                   18  1   25                  30  5   

20 35  15           10          7   
20     35    15     10      7   

    20 35       10  15      7

    10 15 20 35         7   

    7  10 15 20 35
-------------------------------------------------------------------------------

DMA 

int main(){ 
    int a; //a -> memory -> 4 byte 
    //implicitly -> allocate 

    int x[10]; // 40 byte -> 
    //4 elements 6:free -> 24 byte

    int x[10];//40 byte 
    //15 elements  

    // a -> no use 
    //

}
//when 4 byte - release ? 

DMA ? 

pointer -> 


    calloc() - allocate  - when we want to allocate same size of block n times 
    malloc() - allocate  - when we want to allocate a block 
    free()   - release 


a -> 4 byte -> malloc 

a[10] -> 4 byte , 10 qty -> calloc 

stdlib.h 

--------------------------------------------------------------------------------------



































